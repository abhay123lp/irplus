<?xml version="1.0"?>

<!--  
   Copyright 2008 University of Rochester

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->   


<!DOCTYPE hibernate-mapping SYSTEM
			"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!--
	Mapping for a user.
	
	@author Nathan Sarr
-->
<hibernate-mapping package="edu.ur.ir.user">
	<class name="UserEmail" schema="ir_user" table="user_email"
		lazy="true">

		<!-- Common id property. -->
		<id name="id" type="long" column="user_email_id"
			unsaved-value="0" access="field">
			<generator class="sequence">
				<param name="sequence">ir_user.user_email_seq</param>
			</generator>
		</id>

		<!-- A versioned entity. -->
		<version name="version" column="version"
			access="org.hibernate.property.DirectPropertyAccessor" />

		<property name="email" column="email" type="string"
			not-null="true" access="field" />
			
		<property name="lowerCaseEmail" column="lower_case_email" type="string"
			not-null="true" access="field" />

		<property name="isVerified" column="isVerified" type="boolean"
			not-null="true" access="field" />
			
		<property name="token" column="token" type="string"
			not-null="false" access="field" />
						
		<!--  user who owns the email-->
		<many-to-one class="IrUser" 
			name="irUser" column="user_id" insert="true"
			update="true" unique="true" access="field"/>			
	</class>

	<!--  Get a count of email in the system -->
	<query name="userEmailCount">
	    select count(*) from UserEmail
	</query>

    
	<!-- named query for getting a user by email  -->
	<query name="getUserByEmail">
		from UserEmail as UserEmail where
		UserEmail.email = ?
	</query>
	
	<!-- named query for getting a user by lower case email  -->
	<query name="getUserByLowerCaseEmail">
		from UserEmail as UserEmail where
		UserEmail.lowerCaseEmail = :email
	</query>
	
	<!-- named query for getting a user by email  -->
	<query name="getUserEmailByToken">
		from UserEmail as UserEmail where
		UserEmail.token = ?
	</query>		
</hibernate-mapping>