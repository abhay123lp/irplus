<?xml version="1.0"?>

<!--  
   Copyright 2008 University of Rochester

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->   


<!DOCTYPE hibernate-mapping SYSTEM
			"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!--
	Mapping for a group workspace project page folder.
	
	@author Sharmila Ranganathan
-->
<hibernate-mapping package="edu.ur.ir.groupspace">
	<class name="GroupWorkspaceProjectPageFolder" schema="ir_group_workspace"
	    table="group_workspace_project_page_folder"
		lazy="true">

		<!-- Common id property. -->
		<id name="id" type="long" column="group_workspace_project_page_folder_id"
			unsaved-value="0" access="field">
			<generator class="sequence">
				<param name="sequence">ir_group_workspace.group_workspace_project_page_folder_seq</param>
			</generator>
		</id>

		<!-- A versioned entity. -->
		<version name="version" column="version"
			access="org.hibernate.property.DirectPropertyAccessor" />

		<property name="name" column="name" type="string"
			not-null="true" access="field" />

		<property name="description" column="description" type="string"
			not-null="false" />
			
		<property name="leftValue" column="left_value" type="long"
			not-null="true" access="field" />
			
		<property name="rightValue" column="right_value" type="long"
			not-null="true" access="field" />
		
		<property name="path" column="path" type="string"
			not-null="false" access="field" />
		
		<!--  Parent Folder -->
		<many-to-one class="GroupWorkspaceProjectPageFolder" 
			name="parent" column="parent_id" insert="true"
			update="true" access="field"/>
			
	    <!--  Root group workspace project page folder of the tree-->
		<many-to-one class="GroupWorkspaceProjectPageFolder" 
			name="treeRoot" column="root_folder_id" insert="true"
			update="true" not-null="true"
			access="field"/>
		
			    
	    <!-- User This folder belongs to -->
		<many-to-one class="GroupWorkspaceProjectPage" 
			name="groupWorkspaceProjectPage" column="group_workspace_project_page_id" insert="true"
			update="true" unique="true"/>
			
		<!--  Children folders - we cannot cascade the delete orphan
		      because children folders can be promoted to root folders -->
		<set name="children" 
		     optimistic-lock="false"
		     inverse="true" 
		     cascade="all" 
		     access="field"
			 order-by="name"
			 lazy="true"
			 fetch="subselect">
			<key column="parent_id"/>
			<one-to-many class="GroupWorkspaceProjectPageFolder"/>
		</set>

		<!--  Children files - cannot cascade the delete orphan because child
			files can be promoted to root files -->
		<set name="files" inverse="true" 
		    optimistic-lock="false"
		    cascade="all" 
		    access="field" 
		    lazy="true"
		    fetch="subselect">
			<key column="group_workspace_project_page_folder_id" not-null="true"/>
			<one-to-many class="GroupWorkspaceProjectPageFile"/>
		</set>

		<!--  Children publications - cannot cascade the delete orphan because child
			publications can be promoted to root publications -->
		<set name="publications" 
		    inverse="true" 
		    optimistic-lock="false"
		    cascade="all" 
		    access="field" 
		    lazy="true" 
		    fetch="subselect">
			<key column="group_workspace_project_page_folder_id" not-null="true"/>
			<one-to-many class="GroupWorkspaceProjectPagePublication"/>
		</set>

		<!--  Children institutional items - cannot cascade the delete orphan because child
			institutional Item can be promoted to root institutional Item -->
		<set name="institutionalItems" 
		    inverse="true" 
		    optimistic-lock="false"
		    cascade="all" 
		    access="field" 
		    lazy="true"
		    fetch="subselect">
			<key column="group_workspace_project_page_folder_id" not-null="true"/>
			<one-to-many class="GroupWorkspaceProjectPageInstitutionalItem"/>
		</set>
				
		<!--  Children links - cannot cascade the delete orphan because child
			links can be promoted to root links -->
		<set name="links" 
		    inverse="true" 
		    optimistic-lock="false"
		    cascade="all"
		    access="field" 
		    lazy="true"
		    fetch="subselect">
			<key column="group_workspace_project_page_folder_id" not-null="true"/>
			<one-to-many class="GroupWorkspaceProjectPageFileSystemLink"/>
		</set>

	</class>
		
	<!--  All files for the specified folder including files in sub folders  -->
	<query name="getAllGroupWorkspaceProjectPageFilesForFolder">
	    from GroupWorkspaceProjectPageFile as file
	    where file.parentFolder.leftValue between :leftValue and :rightValue
	    and file.parentFolder.treeRoot.id = :rootId
	</query>
	
	<!--  All publications for the specified folder including files in sub folders  -->
	<query name="getAllGroupWorkspaceProjectPagePublicationsForFolder">
	    from GroupWorkspaceProjectPagePublication as publication
	    where  publication.parentFolder.leftValue between :leftValue and :rightValue
	    and publication.parentFolder.treeRoot.id = :rootId
	</query>

	<!--  All institutional items for the specified folder including institutional items in sub folders  -->
	<query name="getAllGroupWorkspaceProjectPageInstitutionalItemsForFolder">
	    from GroupWorkspaceProjectPageInstitutionalItem as institutionalItem
	    where  institutionalItem.parentFolder.leftValue between :leftValue and :rightValue
	    and institutionalItem.parentFolder.treeRoot.id = :rootId
	</query>
		
	<!--  All links for the specified folder including files in sub folders  -->
	<query name="getAllGroupWorkspaceProjectPageLinksForFolder">
	    from GroupWorkspaceProjectPageFileSystemLink as link
	    where  link.parentFolder.leftValue between :leftValue and :rightValue
	    and link.parentFolder.treeRoot.id = :rootId
	</query>
	
    <!--  All versioned files for the specified folder including 
          versioned files in sub folders  -->
	<query name="getAllIrFilesForGroupWorkspaceProjectPageFolder">
	    select irFile from GroupWorkspaceProjectPageFolder folder
	        inner join folder.files file
	        inner join file.irFile irFile
	    where folder.leftValue between :leftValue and :rightValue
	    and folder.treeRoot.id = :rootId
	</query>
	
	<!--  Get a count of group workspace project page folders in the system -->
	<query name="groupWorkspaceProjectPageFolderCount">
	    select count(*) from GroupWorkspaceProjectPageFolder
	</query>
	
	<!-- named query for getting a root group workspace project page folder by name/user -->
	<query name="getRootGroupWorkspaceProjectPageFolderByNameProject">
		from GroupWorkspaceProjectPageFolder as folder where
		folder.name = :name
		and folder.groupWorkspaceProjectPage.id = :projectPageId
		and folder.id = folder.treeRoot.id
	</query>
	
	<!-- named query for getting a group workspace project page folder by name parent id -->
	<query name="getGroupWrokspaceProjectPageFolderByNameParent">
		from GroupWorkspaceProjectPageFolder as folder where
		folder.name = :name
		and folder.parent.id = :parentId
	</query>
	
	<!--  Get all group workspace project page folders that have a left or right value greater than the
           specified value -->	
	<query name="getAllGroupWorkspaceProjectPageFoldersValueGreaterEqual">
	   from GroupWorkspaceProjectPageFolder as folder
	   where ( folder.leftValue >= :leftValue
	   or folder.rightValue >= :rightValue )
	   and folder.treeRoot.id = :rootId
	</query>
	
	<!-- Gets the all group workspace project page folders within the specified tree that are not within the child tree
         Specified.  This also does not retrieve the child tree specified.  
         This only works across the specified root group workspce project page folder -->
	<query name="getAllGroupWorkspaceProjectPageFoldersNotInChildTree">
	    from GroupWorkspaceProjectPageFolder as folder 	    
	    where folder.leftValue not between :leftValue and :rightValue 
	    and folder.treeRoot.id = :rootId
	    order by folder.name
	</query>
	
	<!-- Gets all collections for the specified repository-->
	<query name="getGroupWorkspaceProjectPageFolders">
	    from GroupWorkspaceProjectPageFolder as folder	    
	    where folder.groupWorkspaceProjectPage.id = :id
	    order by folder.name
	</query>
	
    <!-- Gets the path for a given collection-->
	<query name="getGroupWorkspaceProjectPageFolderPath">
	    from GroupWorkspaceProjectPageFolder as folder 	    
	    where :leftValue between folder.leftValue and folder.rightValue
	    and folder.treeRoot.id = :rootId
	    and folder.groupWorkspaceProjectPage.id = :projectPageId
	    order by folder.leftValue
	</query>
	
	<!-- Gets all sub folders within the parent folder -->
	<query name="getSubFoldersForGroupWorkspaceProjectPageFolder">
	    from GroupWorkspaceProjectPageFolder as folder	    
	    where folder.groupWorkspaceProjectPage.id = :projectPageId
	    and folder.parent.id = :parentFolderId
	    order by folder.name
	</query>

	<!-- Get root folders -->
	<query name="getRootGroupWorkspaceProjectPageFolders">
	    from GroupWorkspaceProjectPageFolder as folder	    
	    where folder.groupWorkspaceProjectPage.id = :projectPageId
	    and folder.parent.id is null
	    order by folder.name
	</query>
	
	<!-- Get specified files for group workspace project page -->
	<query name="getAllGroupWorkspaceProjectPageFoldersInList">
	    from GroupWorkspaceProjectPageFolder as folder	    
	    where folder.groupWorkspaceProjectPage.id = :projectPageId
	    and folder.id in(:folders)
	</query>
	
	<!-- Get all other root folders -->
	<query name="getAllOtherRootGroupWorkspaceProjectPageFolders">
	    from GroupWorkspaceProjectPageFolder as folder	    
	    where folder.groupWorkspaceProjectPage.id = :projectPageId
	    and folder.treeRoot.id not in(:folders)
	</query>
	
	 <!-- Gets the all folders except those in the specified set of child folders  -->
	<query name="getAllGroupWorkspaceProjectPageFoldersNotInChildFolders">
	    from GroupWorkspaceProjectPageFolder as folder 	   
	    where folder.groupWorkspaceProjectPage.id = :projectPageId
	    and folder.treeRoot.id = :rootId
	    and folder.leftValue not between :leftValue and :rightValue 
	</query>

	
</hibernate-mapping>