<?xml version="1.0" encoding="UTF-8"?>

<!--  
   Copyright 2008 University of Rochester

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!--
     This is the build file for ir_web
-->
<project name="ir_web" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">

    <!-- Use the build.properties file for user specific settings -->
    <property file="build.properties"/>

    <!-- build directory -->
    <property name="build.dir" value="${basedir}/build"/> 

    <!-- source directory -->
    <property name="src.dir" value="${basedir}/src"/> 

    <!-- test source directory -->
    <property name="test.dir" value="${basedir}/test"/> 
	
    <!-- testng library -->
    <property name="testng.dir" value="${basedir}/test"/> 

    <!-- lib directory -->
    <property name="lib.dir" value="${basedir}/lib"/> 

    <!-- project name -->
    <property name="project.name" value="ir_web"/> 

     <!-- distribution directory -->
    <property name="dist.dir" value="${basedir}/${project.name}"/> 

    <!-- top level location for reports -->
    <property name="report.dir" value="${basedir}/reports"/>

    <!-- location for the test reports -->
    <property name="test.report.dir" value="${report.dir}/test-reports"/>

    <!-- location of the base build file -->
    <property name="base.build.file" value="../base.xml"/>

    <!-- location of the checkstyle xml file -->
	<property name="checkstyle.xml" value="../checkstyle-xml/sun_checks.xml"/>
	
	<!-- location of the checkstyle xml file -->
	<property name="checkstyle.xsl" value="../checkstyle-xml/checkstyle-frames.xsl"/>
	
	<!-- location for checkstyle report directory -->
	<property name="checkstyle.report.dir" value="${report.dir}/checkstyle-reports"/>
	
	<!-- location for checkstyle report xml file-->
    <property name="checkstyle.report.xml" value="${checkstyle.report.dir}/checkstyle.xml"/>
	
	<!-- location for checkstyle report html file-->
	<property name="checkstyle.report.html" value="${checkstyle.report.dir}/checkstyle.html"/>

	<!-- test datasource files for spring -->
	<property name="spring.config.data.source.local" value="../spring-config-common/data-source/run-local"/> 

	<!-- production datasource files for spring -->
	<property name="spring.config.data.source.production" value="../spring-config-common/data-source/production"/> 
	
	<!-- top level spring config directory -->
	<property name="spring.config.common" value="../spring-config-common"/> 
		
	<!-- common configuration files for testing -->
	<property name="spring.config.common.config.test" value="${spring.config.common}/common-config/test"/> 

	<!-- common configuration files for testing -->
	<property name="spring.config.common.config.production" value="${spring.config.common}/common-config/production"/> 

	
	<!-- common configuration files that don't change-->
	<property name="spring.config.common.config" value="${spring.config.common}/common"/> 
	
	<!-- project specific configuration files for spring (usually testing)or local running-->
	<property name="spring.project.config" value="${basedir}/spring-config/local"/> 

	<!-- project specific configuration files for production war file-->
	<property name="spring.project.config.production" value="${basedir}/spring-config/production"/> 

	
	<!-- common configuration files for ehcache -->
	<property name="ehcache.config" value="../ehcache-config"/> 
	
	<!-- folder location for log4j debug file appender -->
	<property name="log4j.debug.file.appender" value="${basedir}/log4j-config/debug-file-appender"/>
	
	<!-- folder location for production log4j debug console output -->
	<property name="log4j.debug.console.appender" value="${basedir}/log4j-config/debug-console-appender"/>
	
	<!-- folder location for production log4j config xml file -->
	<property name="log4j.production.appender" value="${basedir}/log4j-config/production-appender"/>

	<!-- folder location for testng config file -->
	<property name="testng.config" value="${basedir}/testng-config"/>
	
	<!-- The web app directory -->
	<property name="webapps.dir" value="${basedir}/webapps"/>
	
	<!-- The specified webapp being worked on-->
	<property name="webapp.dir" value="${webapps.dir}/${project.name}"/>

	<!-- The webinf directory for local running -->
	<property name="webapp.webinf.dir" value="${webapp.dir}/WEB-INF"/>
	 
	<!-- Web library Directory -->
	<property name="webapp.lib.dir" value="${webapp.webinf.dir}/lib"/>

	<!-- Web classes directory -->
	<property name="webapp.classes.dir" value="${webapp.webinf.dir}/classes"/>

	<!-- Web Inf conf  -->
	<property name="webapp.conf.dir" value="${basedir}/web-conf"/>
	
	<!-- struts configuration files -->
	<property name="struts.config.dir.common" value="${basedir}/struts-config/common"/>
	<property name="struts.config.dir.test" value="${basedir}/struts-config/test"/>
	<property name="struts.config.dir.production" value="${basedir}/struts-config/production"/>

	
	<!-- Tomcat library directory -->
	<property name="tomcat.lib.dir" value="${librarydir}/tomcat/tomcat-6.0.14"/>
	
	<property name="production.stageing.dir" value="${basedir}/production-staging"/>

	
	<!-- import the base set of files -->
    <import file="${base.build.file}"/>
	
	

    <!-- Allow users to see their properties and how they are set -->
    <target name="echo-properties" 
        description="Ouput the project properties for users when needed" >
	    <echo message="build.dir = ${build.dir}"/>
	    <echo message="src.dir = ${src.dir}"/>
	    <echo message="dist.dir = ${dist.dir}"/>
	    <echo message="test.dir = ${test.dir}"/>
	    <echo message="lib.dir = ${lib.dir}"/>
	    <echo message="project.name = ${project.name}"/>
	    <echo message="project.version = ${project.version}"/>
	    <echo message="dist.dir = ${dist.dir}"/>
	    <echo message="report.dir = ${report.dir}"/>
    	
    	<echo message="${spring.config.data.source.test}"/>
    	<echo message="${spring.config.common.config}"/>
    	<echo message="${spring.project.config}"/>
    </target>


    <!-- Set the location where the libraries this project is dependent -->
    <path id="libraries">
	  <fileset dir="${lib.dir}" includes="*.jar"/>
    </path>

    <!-- This is the path for testing -->
	<path id="test.libraries">
		<path refid="libraries"/>
		<pathelement location="${build.dir}/classes"/>
		
		<!-- spring configuration files for testing -->
		<pathelement location="${spring.config.data.source.test}"/>
		
	    <!-- common spring configuration files -->
		<pathelement location="${spring.config.common.config}"/>
		<pathelement location="${spring.project.config}"/>
		<pathelement location="${spring.config.common.config.test}"/>
		
		<!-- test file configurations and properties -->
		<pathelement location="${testng.config}"/>
	</path>

    <!-- Copy non java resources -->
	<target name="copy-resources" description="-->Copy the non java resources into the build directory">
		<copy todir="${build.dir}/classes">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
			
			<!-- logger configuration-->
			<fileset dir="${log4j.production.appender}"/>
		</copy>
	</target>

	<!-- compile the java source files -->
    <target name="build" depends="retrieve, copy-resources" xmlns:ext="http://edu.ur/d1/ext">
        <mkdir dir="${build.dir}/classes"/>
        <ext:javac srcdir="${src.dir}"
			 destdir="${build.dir}/classes"
			 classpathref="libraries"/>
    </target>

	<!-- clean up the build directories -->
    <target name="clean" description="-->Clean the project">
        <delete dir="${build.dir}"/>
        <delete dir="${report.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
	
	<!-- clean up the build directories plus lib directory -->
    <target name="full-clean" depends="clean, clean-run-webapp-local,clean-production-staging" description="-->Clean the project and lib directory">
        <delete dir="${lib.dir}"/>
    	<delete dir="${ivy.dir}"/>
    	<delete file=""/>
    </target>	

    <!-- build the test class files of the project -->
    <target name="test-build" depends="build" description="-->Compile the test classes"
    xmlns:ext="http://edu.ur/d1/ext">
        <ext:javac srcdir="${test.dir}"
			 destdir="${build.dir}/classes"
			 classpathref="libraries"/>
    </target>


	<!-- no tests for web layer -->
	<target name="test" depends="test-build" description="-->Run the tests">
		<echo message="running tests" />
		 <!-- run the tests -->
	</target>

    <!-- generate the documentation -->
    <target name="docs" description="-->build the javadocs">
        <mkdir dir="${dist.dir}/docs"/>
		<javadoc
	           destdir="${dist.dir}/docs/api"
	           author="true"
	           version="true"
	           use="true"
	           windowtitle="University of Rochester Libraries Institutional Repository Web API">

			<fileset dir="${src.dir}" defaultexcludes="yes">
				<include name="edu/ur/**"/>
			</fileset>

			<doctitle><![CDATA[<h1>University of Rochester Libraries Institutional Repository Web API</h1>]]></doctitle>
		    <bottom>
			<![CDATA[<i>Copyright &#169; 2006 University of Rochester Libraries</i>]]></bottom>
	       <tag name="todo" scope="all" description="To do:"/>
	       <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        </javadoc>
    </target>

    <!-- generate a distribution jar file -->
    <target name="dist" depends="test" description="-->generate a distribution jar file">
        <mkdir dir="${dist.dir}"/>
		<!-- Put everything in ${build} into the {project.name}-version.jar file -->
		<jar jarfile="${dist.dir}/${project.name}-${project.version}.jar"
			basedir="${build.dir}/classes"
			excludes="**/*Test.class,
						**/*testng*, 
						testing_unix.properties, 
						testing_windows.properties,
						log4j.properties"/>
    </target>
	
	<fileset id="web.libs" dir="${lib.dir}">
		<exclude name="checkstyle*"/>
		<exclude name="google-collect*"/>
		<exclude name="testng*"/>
		<exclude name="yui*"/>
		<exclude name="servlet-api*"/>
		<exclude name="jsp-api*"/>
    </fileset>
	
    <!-- Copy needed files to the web-inf directory
	     This is so the webapp can point directly 
	     to your jsp files and you can modify them
	     and view the result by refresing the browser.
	     You must first tell your web-browser to look
	     at your webapps directory 
	-->
   <target name="prep-run-webapp-local" depends="build, clean-run-webapp-local, prep-yui">
        <!-- Remove the old classes -->
        <delete dir="${webapp.classes.dir}" />

        <!-- Remove the old libraries -->
        <delete dir="${webapp.lib.dir}"/>
   	
   	    <!-- Remove the old configuration files-->
   	     <delete dir="${webapp.webinf.dir}"/>

   	    <!-- rebuild the folders -->
        <mkdir dir="${webapp.classes.dir}"/>
        <mkdir dir="${webapp.lib.dir}"/>
   	    <mkdir dir="${webapp.webinf.dir}"/>

        <!-- Copy the classes directory into the web classes dir 
             also copy the struts configuration files into the classes
         -->
        <copy todir="${webapp.classes.dir}">
           <fileset dir="${build.dir}/classes"/>
           <fileset dir="${struts.config.dir.common}"/>
           <fileset dir="${struts.config.dir.test}"/>
        </copy>
   	
   	    <copy todir="${webapp.classes.dir}" overwrite="true">
   	           <fileset dir="${log4j.debug.file.appender}"/>
   	    </copy>

        <copy todir="${webapp.lib.dir}">
	        <fileset refid="web.libs"/>
        </copy>

   	    <!-- create the web inf directory -->
        <copy todir="${webapp.webinf.dir}" overwrite="true">
        	<fileset dir="${spring.config.data.source.local}"/>
        	<fileset dir="${spring.config.common.config.test}"/>
        	<fileset dir="${spring.config.common.config}"/>
        	<fileset dir="${spring.project.config}"/>
        	<fileset dir="${webapp.conf.dir}/WEB-INF"/>
        </copy>

        <copy todir="${webapp.webinf.dir}" 
			file="${webapp.conf.dir}/web.xml"/>
     </target>
	
	<!-- unzip the YUI files in correct directory -->
	<target name="prep-yui"  description="--> unzips the yui libraries">
		<mkdir dir="${basedir}/yui-unzip"/>
		<unzip dest="${basedir}/yui-unzip" src="${lib.dir}/yui-2.6.0.zip"/>
		<move todir="${webapp.dir}/page-resources/yui">
			<fileset dir="${basedir}/yui-unzip/yui/build/"/>
		</move>
	</target>
	
	<!-- delete the webapp local files -->
	<target name="clean-run-webapp-local">
		 <delete dir="${webapp.webinf.dir}"/>
	</target>
	

	
	<!-- publish the local war file -->
	<target name="test-run-local" depends="prep-run-webapp-local" description="-->build a local test environment file">
		
		<war destfile="local-${project.name}.war" webxml="${webapp.conf.dir}/web.xml">
		    <webinf dir="${webapp.conf.dir}/WEB-INF"/>
			<fileset dir="${webapp.dir}">
			    <exclude name="WEB-INF/**"/>
			</fileset>
			
			<classes dir="${webapp.classes.dir}"/>
			<lib dir="${webapp.lib.dir}"/>
				      
		 </war>
	</target>

	
	<!-- publish the distribution jar file to the local repository -->
	<!-- this sets production settings.  -->
	<!--     Make sure the production configuration files have been set properly -->
	<target name="publish-local" depends="build, clean-production-staging" description="-->build production war file">
		<!-- re-create production stag -->
		<mkdir dir="${production.stageing.dir}"/>
		
		<!-- make the classes dir-->
		<mkdir dir="${production.stageing.dir}/classes"/>
		
		<!-- production web-inf directory -->
		<mkdir dir="${production.stageing.dir}/web-inf"/>
		
		<!-- copy the configuration files into the directory -->
	    <copy todir="${production.stageing.dir}/classes">
	           <fileset dir="${build.dir}/classes"/>
	    	   <fileset dir="${struts.config.dir.common}"/>
	    	   <fileset dir="${struts.config.dir.production}"/>
	    	   <fileset dir="${spring.config.data.source.production}"/>
	    </copy>

        <!-- overwrite the logging file to be the production appender -->
		<copy todir="${webapp.classes.dir}" overwrite="true">
	    	   <fileset dir="${log4j.production.appender}"/>
	   	</copy>

   	    <!-- create the web inf directory -->
        <copy todir="${production.stageing.dir}/web-inf" overwrite="true">
        	<fileset dir="${spring.config.data.source.production}"/>
        	<fileset dir="${spring.project.config.production}"/>
        	<fileset dir="${spring.config.common.config.production}"/>
        	<fileset dir="${spring.config.common.config}"/>
        	<fileset dir="${webapp.conf.dir}/WEB-INF"/>
        </copy>
		
		<war destfile="production-${project.name}.war" webxml="${webapp.conf.dir}/web.xml">
		    <webinf dir="${production.stageing.dir}/web-inf"/>
			<fileset dir="${webapp.dir}">
			    <exclude name="WEB-INF/**"/>
			</fileset>
			
			<classes dir="${production.stageing.dir}/classes"/>
			<lib dir="${webapp.lib.dir}"/>
				      
		 </war>
		
	</target>
	
	<!-- delete the webapp production staging files -->
	<target name="clean-production-staging">
		 <delete dir="${production.stageing.dir}"/>
	</target>
	

</project>
