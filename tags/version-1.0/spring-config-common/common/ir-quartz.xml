<?xml version="1.0" encoding="UTF-8"?>
<!--  
   Copyright 2008 University of Rochester

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->   

<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
    "http://www.springframework.org/dtd/spring-beans.dtd">
    
<beans>
   <!-- ****************************************** --> 
   <!-- Scheduler which holds the list of triggers -->
   <!-- ****************************************** --> 
   <bean id="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
       
       
       <!-- Spring implementation of the Quartz JobFactory interface. 
            When the scheduler encounters a trigger in the database that's to be fired, 
            it loads the corresponding JobDetails from the database, loads it into a JobDetail object, 
            places that JobDetail object into a TriggerFiredBundle, and passes the 
            TriggerFiredBundle to the JobFactory interface to obtain a Job that's to be run. 
            Now, you might think that because of the name of Spring's JobFactory implementation, 
            it's going to do something with a bean defined in the Spring ApplicationContext, right ? Wrong.
            What this implementation does is get the Job class provided by JobDetail.getClass(), 
            instantiate a new instance of it with a default no-arg constructor, 
            possibly populate it with properties, and then run the Job. 
       -->
       <property name="jobFactory">
           <bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory"/>
       </property>
       
       <!--  data source defined for the application -->
       <property name="dataSource" ref="dataSource" />
       
       <property name="configLocation" value="classpath:quartz.properties"/>
       
       <!-- location of xml file -->
       <property name="jobSchedulingDataLocation" value="quartz_jobs.xml"/>
       
       <!-- overwrite existing jobs-->
       <property name="overwriteExistingJobs" value="true"/>
       
       <!--  transaction manager  -->
       <property name="transactionManager" ref="transactionManager" />
       
       <!--  key for the application context for referencing the application context -->
       <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
       
        <!--  wait for jobs to finish before shutting down. -->
       <property name="waitForJobsToCompleteOnShutdown" value="true" />
   </bean>
</beans>