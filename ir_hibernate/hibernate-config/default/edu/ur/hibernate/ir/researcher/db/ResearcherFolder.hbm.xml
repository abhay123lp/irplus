<?xml version="1.0"?>

<!--  
   Copyright 2008 University of Rochester

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->   


<!DOCTYPE hibernate-mapping SYSTEM
			"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!--
	Mapping for an Researcher folder.
	
	@author Sharmila Ranganathan
-->
<hibernate-mapping package="edu.ur.ir.researcher">
	<class name="ResearcherFolder" table="ir_researcher.researcher_folder"
		lazy="true">

		<!-- Common id property. -->
		<id name="id" type="long" column="researcher_folder_id"
			unsaved-value="0" access="field">
			<generator class="sequence">
				<param name="sequence">ir_researcher.researcher_folder_seq</param>
			</generator>
		</id>

		<!-- A versioned entity. -->
		<version name="version" column="version"
			access="org.hibernate.property.DirectPropertyAccessor" />

		<property name="name" column="name" type="string"
			not-null="true" access="field" />

		<property name="description" column="description" type="string"
			not-null="false" />
			
		<property name="leftValue" column="left_value" type="long"
			not-null="true" access="field" />
			
		<property name="rightValue" column="right_value" type="long"
			not-null="true" access="field" />
		
		<property name="path" column="path" type="string"
			not-null="false" access="field" />
		
		<!--  Parent Folder -->
		<many-to-one class="ResearcherFolder" 
			name="parent" column="parent_id" insert="true"
			update="true" access="field"/>
			
	    <!--  Root researcher folder of the tree-->
		<many-to-one class="ResearcherFolder" 
			name="treeRoot" column="root_researcher_folder_id" insert="true"
			update="true" not-null="true"
			access="field"/>
		
			    
	    <!-- User This folder belongs to -->
		<many-to-one class="Researcher" 
			name="researcher" column="researcher_id" insert="true"
			update="true" unique="true"/>
			
		<!--  Children folders - we cannot cascade the delete orphan
		      because children folders can be promoted to root folders -->
		<set name="children" 
		     optimistic-lock="false"
		     inverse="true" 
		     cascade="all" 
		     access="field"
			 order-by="name"
			 lazy="true"
			 fetch="subselect">
			<key column="parent_id"/>
			<one-to-many class="ResearcherFolder"/>
		</set>

		<!--  Children files - cannot cascade the delete orphan because child
			files can be promoted to root files -->
		<set name="files" inverse="true" 
		    optimistic-lock="false"
		    cascade="all" 
		    access="field" 
		    lazy="true"
		    fetch="subselect">
			<key column="researcher_folder_id" not-null="true"/>
			<one-to-many class="ResearcherFile"/>
		</set>

		<!--  Children publications - cannot cascade the delete orphan because child
			publications can be promoted to root publications -->
		<set name="publications" 
		    inverse="true" 
		    optimistic-lock="false"
		    cascade="all" 
		    access="field" 
		    lazy="true" 
		    fetch="subselect">
			<key column="researcher_folder_id" not-null="true"/>
			<one-to-many class="ResearcherPublication"/>
		</set>

		<!--  Children institutional items - cannot cascade the delete orphan because child
			institutional Item can be promoted to root institutional Item -->
		<set name="institutionalItems" 
		    inverse="true" 
		    optimistic-lock="false"
		    cascade="all" 
		    access="field" 
		    lazy="true"
		    fetch="subselect">
			<key column="researcher_folder_id" not-null="true"/>
			<one-to-many class="ResearcherInstitutionalItem"/>
		</set>
				
		<!--  Children links - cannot cascade the delete orphan because child
			links can be promoted to root links -->
		<set name="links" 
		    inverse="true" 
		    optimistic-lock="false"
		    cascade="all"
		    access="field" 
		    lazy="true"
		    fetch="subselect">
			<key column="researcher_folder_id" not-null="true"/>
			<one-to-many class="ResearcherLink"/>
		</set>

	</class>
		
	<!--  All files for the specified folder including files in sub folders  -->
	<query name="getAllResearcherFilesForFolder">
	    from ResearcherFile as researcherFile
	    where  researcherFile.parentFolder.leftValue between ? and ?
	    and researcherFile.parentFolder.treeRoot.id = ?
	</query>
	
	<!--  All publications for the specified folder including files in sub folders  -->
	<query name="getAllResearcherPublicationsForFolder">
	    from ResearcherPublication as researcherPublication
	    where  researcherPublication.parentFolder.leftValue between ? and ?
	    and researcherPublication.parentFolder.treeRoot.id = ?
	</query>

	<!--  All institutional items for the specified folder including institutional items in sub folders  -->
	<query name="getAllResearcherInstitutionalItemsForFolder">
	    from ResearcherInstitutionalItem as researcherInstitutionalItem
	    where  researcherInstitutionalItem.parentFolder.leftValue between ? and ?
	    and researcherInstitutionalItem.parentFolder.treeRoot.id = ?
	</query>
		
	<!--  All links for the specified folder including files in sub folders  -->
	<query name="getAllResearcherLinksForFolder">
	    from ResearcherLink as researcherLink
	    where  researcherLink.parentFolder.leftValue between ? and ?
	    and researcherLink.parentFolder.treeRoot.id = ?
	</query>
	
    <!--  All versioned files for the specified folder including 
          versioned files in sub folders  -->
	<query name="getAllIrFilesForFolder">
	    select irFile from ResearcherFolder folder
	        inner join folder.files file
	        inner join file.irFile irFile
	    where folder.leftValue between ? and ?
	    and folder.treeRoot.id = ?
	</query>
	
	<!--  Get a count of researcher folders in the system -->
	<query name="researcherFolderCount">
	    select count(*) from ResearcherFolder
	</query>
	
	<!-- named query for getting all collections ordered by name -->
    <query name="getAllResearcherFolderNameAsc">from ResearcherFolder order by name </query>
    
    <!-- named query for getting a researcherFolder by name -->
	<query name="getResearcherFolderByName">
		from ResearcherFolder as ResearcherFolder where
		ResearcherFolder.name = ?
	</query>
	
	<!-- named query for getting a root researcher folder by name/user -->
	<query name="getRootResearcherFolderByNameResearcher">
		from ResearcherFolder as ResearcherFolder where
		ResearcherFolder.name = ?
		and ResearcherFolder.researcher.id = ?
		and ResearcherFolder.id = ResearcherFolder.treeRoot.id
	</query>
	
	<!-- named query for getting a researcher folder by name parent id -->
	<query name="getResearcherFolderByNameParent">
		from ResearcherFolder as ResearcherFolder where
		ResearcherFolder.name = ?
		and ResearcherFolder.parent.id = ?
	</query>
	
	<!--  Get all researcher folders that have a left or right value greater than the
           specified value -->	
	<query name="getAllResearcherFoldersValueGreaterEqual">
	   from ResearcherFolder as researcherFolder
	   where ( researcherFolder.leftValue >= ?
	   or researcherFolder.rightValue >= ? )
	   and researcherFolder.treeRoot.id = ?
	</query>
	
	<!-- Gets the all researcher folders within the specified tree that are not within the child tree
         Specified.  This also does not retrieve the child tree specified.  
         This only works across the specified root researcher folder -->
	<query name="getAllResearcherFoldersNotInChildTree">
	    from ResearcherFolder as researcherFolder 	    
	    where researcherFolder.leftValue not between ? and ? 
	    and researcherFolder.treeRoot.id = ?
	    order by researcherFolder.name
	</query>
	
     <!-- Gets the all folders for the specified database except the specified collection and
	     all it's children.  This works across all root folders   -->
	<query name="getAllResearcherFoldersNotInChild">
	    from ResearcherFolder as researcherFolder 	    
	    where ( researcherFolder.leftValue not between ? and ? 
	    and researcherFolder.treeRoot.id = ? 
	    and researcherFolder.researcher.id = ?)
	    or ( researcherFolder.researcher.id = ? and researcherFolder.treeRoot.id != ? )
	    order by researcherFolder.name
	</query>
	
	<!-- Gets all collections for the specified repository-->
	<query name="getResearcherFoldersForResearcher">
	    from ResearcherFolder as researcherFolder	    
	    where researcherFolder.researcher.id = ?
	    order by researcherFolder.name
	</query>
	
    <!-- Gets the path for a given collection-->
	<query name="getResearcherFolderPath">
	    from ResearcherFolder as researcherFolder 	    
	    where ? between researcherFolder.leftValue and researcherFolder.rightValue
	    and researcherFolder.treeRoot.id = ?
	    and researcherFolder.researcher.id = ?
	    order by researcherFolder.leftValue
	</query>
	
	<!-- Gets all sub folders within the parent folder -->
	<query name="getSubFoldersForResearcherFolder">
	    from ResearcherFolder as researcherFolder	    
	    where researcherFolder.researcher.id = ?
	    and researcherFolder.parent.id = ?
	    order by researcherFolder.name
	</query>

	<!-- Get root folders -->
	<query name="getRootResearcherFolders">
	    from ResearcherFolder as researcherFolder	    
	    where researcherFolder.researcher.id = ?
	    and researcherFolder.parent.id is null
	    order by researcherFolder.name
	</query>
	
	<!-- Get specified files for researcher -->
	<query name="getAllResearcherFoldersInList">
	    from ResearcherFolder as researcherFolder	    
	    where researcherFolder.researcher.id = :researcherId
	    and researcherFolder.id in(:folders)
	</query>
	
	<!-- Get all other root folders -->
	<query name="getAllOtherRootResearcherFolders">
	    from ResearcherFolder as researcherFolder	    
	    where researcherFolder.researcher.id = :researcherId
	    and researcherFolder.treeRoot.id not in(:folders)
	</query>
	
	 <!-- Gets the all folders except those in the specified set of child folders  -->
	<query name="getAllResearcherFoldersNotInChildFolders">
	    from ResearcherFolder as researcherFolder 	   
	    where researcherFolder.researcher.id = ?
	    and researcherFolder.treeRoot.id = ?
	    and researcherFolder.leftValue not between ? and ? 
	</query>

	
</hibernate-mapping>